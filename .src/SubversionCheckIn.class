' Gambas class file

Public Root As SubversionRoot
Public RootObserver As Observer

Public Sub _new()

  With List

    .Columns.Count = 4

    With List.Columns[1]
      .Text = ("Status")
      .Alignment = Align.Center
      .Width = 120
    End With

    With List.Columns[2]
      .Text = ("Size")
      .Alignment = Align.Right
      .Width = 80
    End With

    With List.Columns[3]
      .Text = ("Modified")
      .Alignment = Align.Center
      .Width = 150
    End With

  End With

  HSplitTree.Layout = [25, 75]

End

Public Sub Form_Open()

  Try WorkingDirectory.text = Args[1]
  Me.Update_User_Interface
  PopulateRepository                                                          'Populate the Repository ComboBox
  Settings.read(Me, "Window")                                                 'Get details of the last window position and size

End

Public Sub PickWorkingDirectory_Click()

  Dim Credentials As SubversionCredentials
  
  Repository_Click                                                            'Update the Repository ComboBox

  Try Dialog.Path = WorkingDirectory.text
  If Not Dialog.SelectDirectory() Then

    If Repository.Text And If Not WorkingDirectory.Text And If Message.Question("Checkout:\n\"" & Repository.Text & "\"\nto: \n\"" & Dialog.Path & "\"", "Yes", "No") = 1

      Credentials = New SubversionCredentials(Repository.Text)
      Credentials.ShowIfRequired()
      If Not Credentials.IsCancelled Then

        Me.Mouse = Mouse.Wait
        Tabs.Index = 1
        Wait

        Me.Root = New SubversionRoot(WorkingDirectory.Text)
        Me.RootObserver = New Observer(Me.Root, True) As "RootObserver"

        Me.Root.FlagError = False
        Me.Root.Checkout(Repository.text, Dialog.Path, Credentials.UserName.Text, Credentials.Password.text)

        Me.Mouse = Mouse.Default
        If Not Me.Root.FlagError Then
          Tabs.Index = 0
          Wait
        Endif

      Endif

    Endif

    WorkingDirectory.text = Dialog.Path
  Endif

End

Public Sub WorkingDirectory_Change()

  Me.LoadFromSubversionAndDisplay()

End

Public Sub LoadFromSubversionAndDisplay()

  Dim SvnFile As SubversionFile
  Dim Credentials As SubversionCredentials

  If Exist(WorkingDirectory.text) Then

    Me.Root = New SubversionRoot(WorkingDirectory.Text)
    Me.RootObserver = New Observer(Me.Root, True) As "RootObserver"
    Me.Root.LoadFromSubversion()

    List.Clear
    Tree.Clear
    Revision.text = ""
    Commit.Enabled = False

    If Me.Root.Files.Count > 0 Then
      For Each SvnFile In Me.Root.Files
        With SvnFile

          If Not .IsSquiggle() Then
            Try Tree.Add(.FullPath, .FileName, .GetPicture(), .GetParent()).Expanded = Me.Root.Should_Parent_Expand(.FullPath)
          End If

          If .IsCommitable() Then
            .IsChecked = True
            List.Add(.FullPath, .FullPath, .GetCheckedPicture())
            List[.FullPath][1] = .StatusDisplay()
            List[.FullPath][2] = .SizeDisplay()
            List[.FullPath][3] = .DateDisplay()
          Endif

        End With
      Next
    Endif
  Endif

  With Me.Root
    Try Revision.Text = "  " & Subst(("Revision: &1 - Author: &2 - Date: &3"), .Revision, .Author, Format(.CommitDate, ("d mmmm yyyy hh:nn:ss")))
  End With

  Me.Update_User_Interface()

  If Message.Question("Check for Updates Available?", "Yes", "No") = 1 Then
    Credentials = New SubversionCredentials(Repository.Text)
    Credentials.ShowIfRequired()
    If Not Credentials.IsCancelled Then
      Me.Root.Load_Subversion_Repository_Latest_Status(Credentials.UserName.Text, Credentials.Password.Text)
      Me.Update_User_Interface()
    Endif
  Endif

End

Public Sub CommitMessage_Change()

  Me.Update_User_Interface()

End

Public Sub Update_User_Interface()

  Update.Enabled = False
  Commit.Enabled = False
  Refresh.Enabled = WorkingDirectory.text <> ""

  If Not IsNull(Me.Root) Then

    Commit.Enabled = List.Count > 0 And CommitMessage.text <> Null And Me.Root.SelectedCount() > 0
    Update.Enabled = Me.Root.IsConnected
    Repository.text = Me.Root.RepositoryUrl

    If Me.Root.Revision = Me.Root.RevisionLatest Then
      Update.Text = ("&Update")
    Else
      Update.Text = ("&Updates Available")
    Endif

  Endif

  Wait

End

Public Sub Commit_Click()

  Dim Credentials As SubversionCredentials

  If Not IsNull(Me.Root) Then

    Credentials = New SubversionCredentials(Repository.Text)
    Credentials.ShowIfRequired()
    If Not Credentials.IsCancelled Then

      Me.Mouse = Mouse.Wait
      Tabs.index = 1
      Wait

      Clipboard.Copy(CommitMessage.Text)

      Me.Root.FlagError = False
      Me.Root.Commit(CommitMessage.Text, False, Credentials.UserName.Text, Credentials.Password.Text)

      If Not Me.Root.FlagError Then

        CommitMessage.Clear

        Me.LoadFromSubversionAndDisplay()

        Me.Mouse = Mouse.Default
        Message.Title = ("Commit")
        Message.Info(("Committed!"))
        Tabs.index = 0

      Else

        Me.Mouse = Mouse.Default
        Message.Title = ("Commit")
        Message.Info(("Errors Detected!"))

      Endif

    End If

  Endif

End

Public Sub Update_Click()

  Dim Credentials As SubversionCredentials

  If Not IsNull(Me.Root) Then

    Credentials = New SubversionCredentials(Repository.Text)
    Credentials.ShowIfRequired()
    If Not Credentials.IsCancelled Then

      Me.Mouse = Mouse.Wait
      Tabs.Index = 1
      Wait

      Me.Root.FlagError = False
      Me.Root.Update(Credentials.UserName.Text, Credentials.Password.Text)

      If Not Me.Root.FlagError Then

        Me.Mouse = Mouse.Default

        Me.LoadFromSubversionAndDisplay()
        Message.Title = ("Update")
        Message.Info(("Updated!"))

        Tabs.Index = 0

      Else

        Me.Mouse = Mouse.Default

        Message.Title = ("Update")
        Message.Info(("Errors Detected!"))

      Endif

    Endif
  Endif

End

Public Sub Refresh_Click()

  Me.LoadFromSubversionAndDisplay()
  Message.Title = ("Refresh")
  Message.Info(("Refreshed!"))

End

Public Sub List_DblClick()

  Dim Item As SubversionFile

  If Not IsNull(Me.root)
    Try Item = Me.Root.GetFile(List.Current.Key)
    If Not IsNull(Item) Then
      Item.IsChecked = Not Item.IsChecked
      List.Current.Picture = Item.GetCheckedPicture()
      Me.Update_User_Interface()
    Endif
  End If

End

Public Sub BrowseToRepository_Click()

  Repository_Click                                                            'Update the Repository ComboBox
  If Not IsNull(Me.Root) And If Lower(Repository.text) = Lower(Me.Root.RepositoryUrl) Then
    Desktop.Open(Me.Root.RepositoryRootUrl)
  Else If Repository.Text
    Desktop.Open(Trim(Repository.Text))
  Endif

End

Public Sub ListDiff_Click()

  If Not IsNull(Me.root)
    Me.Root.Diff(List.Current.Key)
  End If

End

Public Sub ListRevert_Click()

  If Not IsNull(Me.root)
    Me.Root.Revert(List.Current.Key)
    Me.LoadFromSubversionAndDisplay()
  End If

End

Public Sub ListAdd_Click()

  If Not IsNull(Me.root)
    Me.Root.Add(List.Current.Key)
    Me.LoadFromSubversionAndDisplay()
  End If

End

Public Sub TreeDiff_Click()

  If Not IsNull(Me.root)
    Me.Root.Diff(Tree.Current.Key)
  End If

End

Public Sub TreeRevert_Click()

  If Not IsNull(Me.root)
    Me.Root.Revert(Tree.Current.Key)
    Me.LoadFromSubversionAndDisplay()
  End If

End

Public Sub TreeAdd_Click()

  If Not IsNull(Me.root)
    Me.Root.Add(Tree.Current.Key)
    Me.LoadFromSubversionAndDisplay()
  End If

End

Public Sub RootObserver_Progress(Value As String, Optional NewLine As Boolean = True)

  Commands.text &= Value & If(Newline, "\n", "")
  Wait

End Sub

Public Sub PopulateRepository()                                               'To Populate the Repository ComboBox

  Dim sTemp As String                                                           'Temp string
  
  For Each sTemp In Settings["sURLs", [" ", " "]]                               'Loop through each stored URL
    Repository.Add(sTemp)                                                       'Add each item to the ComboBox
  Next
  
End

Public Sub Repository_Click()                                                 'What to do if the Combobox list changes

  Dim sList As String[] = Repository.List                                       'Store the list of URLs in sList
  Dim sNewList As New String[]                                                  'This will store the revised ComboBox list
  Dim sHold, sTemp As String                                                    'Temp strings
  Dim sDuplicateCheck As String                                                 'This is used to test for string duplications
  Dim siCount As Short = -1                                                     'Counter
  
  If Repository.Length > 10 Then                                                'Make sure whatever is in the ComboBox TextBox is worth storing
    sHold = Trim(Repository.Text)                                               'This holds the URL displayed
    
    For Each sTemp In sList                                                     'For each item in the URL List..
      Stemp = Trim(sTemp)                                                       'Trim the line
      Inc siCount                                                               'Increase counter
      If siCount > 9 Then Break                                                 'If there are more than 10 items in the list get out of here
      If siCount = 0 Then                                                       'If this is the first item in the new list..
        sNewList.Add(sHold)                                                     'Add the first item to the new list
        sNewList.Add(sTemp)                                                     'Add the nex item to the new list
      Else                                                                      'Else..
        sDuplicateCheck = sNewList.Join()                                       'Create a string from the new list array
        If InStr(sDuplicateCheck, sTemp) Then Continue                          'If there is duplication then jump out of loop
        sNewList.Add(sTemp)                                                     'Add the item to the new list
      End If
    Next
    
    If sNewList.max = 10 Then sNewList[sNewList.max] = ""                       'If the list is greater that 10 then delete the last item
    Repository.list = sNewList                                                'Replace the old ComboBox list with the new one
  End If
  
End

Public Sub Form_close()                                                       'What to do when the Form closes
  
  Settings["sURLs"] = Repository.List                                           'Store the ComboBox list
  Settings.Write(Me, "Window")                                                  'Store the window position and size
  
End
