' Gambas class file

Public RepositoryRootUrl As String
Public RepositoryUrl As String
Public IsConnected As Boolean

Public WorkingDirectory As String
Public Files As New SubversionFile[]

Event Progress(Value As String)

Const NewCommandSeperator As String = "---------------------------------------------------------------------"

Public Sub _new(MyWorkingDirectory As String)

  Me.WorkingDirectory = MyWorkingDirectory

End

Public Function ExecuteCommand(Command As String, Optional Password As String = "", Optional Show As Boolean = True, Optional WaitForExit As Boolean = True) As String

  Dim Result As String
  Dim Tool As Process
  Dim Text As String

  Raise Progress(NewCommandSeperator)
  If Password = "" Then
    Raise Progress(">> " & Command)
  Else
    Raise Progress(">> " & Replace(Command, Password, Replace(Space(Len(Password)), " ", "*")))
  Endif
  'Print Command
  Raise Progress(NewCommandSeperator)

  If WaitForExit Then
    If Show Then
      Tool = Shell Command For Read
      Do While Not Tool.EndOfFile
        Text = Tool.ReadLine()
        'Result &= Text & "\n"
        'Print Text & "\n"
        Raise Progress(Text)
      Loop
    Else
      Shell Command Wait To Result
      'Raise Progress(Result)
      'Print Result
    End If
  Else
    Shell Command To Result
  End If

  Return Result

End

Public Sub Checkout(Url As String, NewWorkingDirectory As String, UserName As String, Password As String)

  ExecuteCommand("svn checkout \"" & Url & "\" \"" & NewWorkingDirectory & "\" --no-auth-cache --trust-server-cert --non-interactive --username " & UserName & " --password " & Password, Password)

End

Public Sub LoadFromSubversion()

  Me.Files.Clear
  Me.IsConnected = False
  Me.Load_Subversion_Information()
  Me.Load_Subversion_Status()
  Me.Add_Any_Unversioned_Missing_Files()
  Me.Add_FileName_RelativePath_IsFolder_ModifiedDate_And_Size()

End

Public Sub Load_Subversion_Information()

  Dim xDoc As New XmlDocument

  Dim Entry As XmlNode
  Dim Node As XmlNode
  Dim Value As XmlNode

  xDoc.FromString(ExecuteCommand("svn info --xml \"" & Me.WorkingDirectory & "\"", "", False))

  For Each Entry In xDoc.GetElementsByTagName("entry")

    For Each Node In Entry.ChildNodes

      If Node.Name = "url" Then
        Me.RepositoryUrl = Node.Value

      Else If Node.Name = "repository"
        For Each Value In Node.ChildNodes

          If Value.Name = "root" Then
            Me.RepositoryRootUrl = Value.Value
            Me.IsConnected = True

          Endif

        Next

      End If
    Next

  Next

End

Public Sub Load_Subversion_Status()

  Dim SvnFile As SubversionFile

  Dim xDoc As New XmlDocument

  Dim Entry As XmlNode
  Dim Status As XmlNode
  Dim Commits As XmlNode
  Dim Value As XmlNode

  xDoc.FromString(ExecuteCommand("svn status --verbose --xml \"" & Me.WorkingDirectory & "\"", "", False))

  For Each Entry In xDoc.GetElementsByTagName("entry")

    SvnFile = New SubversionFile
    SvnFile.FullPath = Entry.Attributes["path"]

    For Each Status In Entry.ChildNodes
      If Status.Name = "wc-status" Then

        SvnFile.Status = Status.Attributes["item"]
        SvnFile.Props = Status.Attributes["props"]

        For Each Commits In Status.ChildNodes
          If Commits.Name = "commit" Then

            SvnFile.Revision = CInt(Commits.Attributes["revision"])

            For Each Value In Commits.ChildNodes

              If Value.Name = "author" Then
                SvnFile.Author = Value.Value

              Else If Value.Name = "date" Then

                '2017-02-21T17:14:53.000000Z
                Try SvnFile.CommitDate = Date(Left(Value.Value, 4), Right(Left(Value.value, 7), 2), Right(Left(Value.value, 10), 2),
                  Right(Left(Value.value, 13), 2), Right(Left(Value.value, 16), 2), Right(Left(Value.value, 19), 2))

              Endif

            Next
          Endif
        Next
      End If
    Next

    Me.Files.Add(SvnFile)
  Next

End

Public Sub Add_Any_Unversioned_Missing_Files()

  Dim FileName As String
  Dim FullPath As String
  Dim FileFound As Boolean
  Dim SvnFile As SubversionFile

  For Each FileName In RDir(Me.WorkingDirectory)
    If Lower(Left(FileName, 4)) <> ".svn" Then

      FullPath = Me.WorkingDirectory &/ FileName
      FileFound = False

      For Each SvnFile In Me.Files
        If Lower(SvnFile.FullPath) = Lower(FullPath) Then
          FileFound = True
          Break
        Endif
      Next

      If Not FileFound Then
        SvnFile = New SubversionFile
        SvnFile.FullPath = FullPath
        SvnFile.Status = "unversioned"
        Me.Files.Add(SvnFile)
      Endif

    End If
  Next

End

Public Sub Add_FileName_RelativePath_IsFolder_ModifiedDate_And_Size()

  Dim SvnFile As SubversionFile

  For Each SvnFile In Me.Files
    SvnFile.FileName = Right(SvnFile.FullPath, - RInStr(SvnFile.FullPath, "/"))
    SvnFile.FolderName = Right(Left(SvnFile.FullPath, - Len(SvnFile.FileName) - 1), - RInStr(Left(SvnFile.FullPath, - Len(SvnFile.FileName) - 1), "/"))
    SvnFile.RelativePath = Right(SvnFile.FullPath, - Len(Me.WorkingDirectory))
    SvnFile.IsFolder = IsDir(SvnFile.FullPath)
    If Not SvnFile.IsFolder And If Exist(SvnFile.FullPath) Then
      With Stat(SvnFile.FullPath)
        SvnFile.ModifiedDate = .LastModified
        SvnFile.Size = .Size
      End With
    Endif
  Next

End

Public Function GetFile(FullPath As String) As SubversionFile

  Dim SvnFile As SubversionFile

  For Each SvnFile In Me.Files
    If SvnFile.FullPath = FullPath Then
      Return SvnFile
    Endif
  Next

  Return Null

End

Public Sub Update(UserName As String, Password As String)

  ExecuteCommand("svn update \"" & Me.WorkingDirectory & "\" --no-auth-cache --trust-server-cert --non-interactive --username " & UserName & " --password " & Password, Password)

End

Public Sub Commit(CommitMessage As String, UpdateAfter As Boolean, UserName As String, Password As String)

  Dim SvnFile As SubversionFile
  Dim FileNames As String
  Dim Count As Integer

  For Each SvnFile In Me.Files
    If SvnFile.IsChecked And If SvnFile.IsUnversioned() And If SvnFile.Iscommitable() Then
      Me.Add_All_Parent_Folders(SvnFile.GetParent())
    Else If SvnFile.IsChecked And If SvnFile.IsIgnored() And If SvnFile.Iscommitable() Then
      ExecuteCommand("svn delete \"" & SvnFile.FullPath & "\" --force --keep-local")
    Endif
  Next

  For Each SvnFile In Me.Files
    If SvnFile.IsChecked And If SvnFile.Iscommitable() Then
      Count += 1
      FileNames &= "\"" & SvnFile.FullPath & "\" "
    Endif
  Next

  If Count > 0 Then

    ExecuteCommand("svn commit " & FileNames & "--message \"" & Replace(CommitMessage, "\"", "'") & "\" --no-auth-cache --trust-server-cert --non-interactive --username " & UserName & " --password " & Password, Password)

    If UpdateAfter Then
      Me.Update(Username, Password)
    Endif

  End If

End

Public Function SelectedCount() As Integer

  Dim SvnFile As SubversionFile
  Dim Count As Integer

  For Each SvnFile In Me.Files
    If SvnFile.IsChecked And If SvnFile.Iscommitable() Then
      Count += 1
    Endif
  Next

  Return Count

End

Public Sub Add_All_Parent_Folders(FullPath As String)

  Dim Folder As SubversionFile = Me.GetFile(fullpath)

  If Not IsNull(folder) Then
    If Not Folder.VersionControlled() Then

      Me.Add_All_Parent_Folders(Folder.GetParent())

      ExecuteCommand("svn add \"" & Folder.FullPath & "\" --depth=empty")

      Folder.MarkAdded()

    Endif
  Endif

End

Public Function Should_Parent_Expand(Parent As String) As Boolean

  Dim SvnFile As SubversionFile

  For Each SvnFile In Me.Files
    If SvnFile.GetParent() = Parent Then
      If Not SvnFile.IsIgnored() Then
        Return True
      Endif
      If SvnFile.IsFolder And If Me.Should_Parent_Expand(SvnFile.FullPath) Then
        Return True
      Endif
    Endif
  Next

End

Public Sub Diff(FullPath As String)

  Dim SvnFile As SubversionFile

  Try SvnFile = Me.GetFile(FullPath)
  If Not IsNull(SvnFile) Then
    ExecuteCommand("meld \"" & SvnFile.FullPath & "\"", "", True, False)
  Endif

End

Public Sub Revert(FullPath As String)

  Dim SvnFile As SubversionFile

  Try SvnFile = Me.GetFile(FullPath)
  If Not IsNull(SvnFile) Then
    ExecuteCommand("svn revert \"" & SvnFile.FullPath & "\"")
  Endif

End

Public Sub Add(FullPath As String)

  Dim SvnFile As SubversionFile

  Try SvnFile = Me.GetFile(FullPath)
  If Not IsNull(SvnFile) Then
    ExecuteCommand("svn add \"" & SvnFile.FullPath & "\"")
  Endif

End

